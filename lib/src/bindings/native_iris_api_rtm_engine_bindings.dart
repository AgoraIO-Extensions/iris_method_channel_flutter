// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to IrisApiRtmEngine
class NativeIrisApiRtmEngineBinding {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeIrisApiRtmEngineBinding(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeIrisApiRtmEngineBinding.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  IrisApiRtmEnginePtr CreateIrisRtmEngine(
    ffi.Pointer<ffi.Void> engine,
  ) {
    return _CreateIrisRtmEngine(
      engine,
    );
  }

  late final _CreateIrisRtmEnginePtr = _lookup<
      ffi.NativeFunction<
          IrisApiRtmEnginePtr Function(
              ffi.Pointer<ffi.Void>)>>('CreateIrisRtmEngine');
  late final _CreateIrisRtmEngine = _CreateIrisRtmEnginePtr.asFunction<
      IrisApiRtmEnginePtr Function(ffi.Pointer<ffi.Void>)>();

  void DestroyIrisRtmEngine(
    IrisApiRtmEnginePtr engine,
  ) {
    return _DestroyIrisRtmEngine(
      engine,
    );
  }

  late final _DestroyIrisRtmEnginePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(IrisApiRtmEnginePtr)>>(
          'DestroyIrisRtmEngine');
  late final _DestroyIrisRtmEngine =
      _DestroyIrisRtmEnginePtr.asFunction<void Function(IrisApiRtmEnginePtr)>();

  int CallIrisRtmApi(
    IrisApiRtmEnginePtr engine_ptr,
    ffi.Pointer<ApiParam> param,
  ) {
    return _CallIrisRtmApi(
      engine_ptr,
      param,
    );
  }

  late final _CallIrisRtmApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              IrisApiRtmEnginePtr, ffi.Pointer<ApiParam>)>>('CallIrisRtmApi');
  late final _CallIrisRtmApi = _CallIrisRtmApiPtr.asFunction<
      int Function(IrisApiRtmEnginePtr, ffi.Pointer<ApiParam>)>();

  IrisEventHandlerHandle CreateIrisEventHandler(
    ffi.Pointer<IrisCEventHandler> event_handler,
  ) {
    return _CreateIrisEventHandler(
      event_handler,
    );
  }

  late final _CreateIrisEventHandlerPtr = _lookup<
      ffi.NativeFunction<
          IrisEventHandlerHandle Function(
              ffi.Pointer<IrisCEventHandler>)>>('CreateIrisEventHandler');
  late final _CreateIrisEventHandler = _CreateIrisEventHandlerPtr.asFunction<
      IrisEventHandlerHandle Function(ffi.Pointer<IrisCEventHandler>)>();

  void DestroyIrisEventHandler(
    IrisEventHandlerHandle handler,
  ) {
    return _DestroyIrisEventHandler(
      handler,
    );
  }

  late final _DestroyIrisEventHandlerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(IrisEventHandlerHandle)>>(
          'DestroyIrisEventHandler');
  late final _DestroyIrisEventHandler = _DestroyIrisEventHandlerPtr.asFunction<
      void Function(IrisEventHandlerHandle)>();
}

typedef IrisApiRtmEnginePtr = ffi.Pointer<ffi.Void>;

class ApiParam extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> event;

  external ffi.Pointer<ffi.Int8> data;

  @ffi.Uint32()
  external int data_size;

  external ffi.Pointer<ffi.Int8> result;

  external ffi.Pointer<ffi.Pointer<ffi.Void>> buffer;

  external ffi.Pointer<ffi.Uint32> length;

  @ffi.Uint32()
  external int buffer_count;
}

typedef IrisEventHandlerHandle = ffi.Pointer<ffi.Void>;

class IrisCEventHandler extends ffi.Struct {
  external Func_Event OnEvent;
}

typedef Func_Event = ffi
    .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EventParam>)>>;

class EventParam extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> event;

  external ffi.Pointer<ffi.Int8> data;

  @ffi.Uint32()
  external int data_size;

  external ffi.Pointer<ffi.Int8> result;

  external ffi.Pointer<ffi.Pointer<ffi.Void>> buffer;

  external ffi.Pointer<ffi.Uint32> length;

  @ffi.Uint32()
  external int buffer_count;
}
